<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Ramblings about all things technical</title><link>https://blog.jamesclonk.io/posts/</link><description>Recent content in Posts on Ramblings about all things technical</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 15 Oct 2021 17:19:41 +0200</lastBuildDate><atom:link href="https://blog.jamesclonk.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Running WireGuard VPN (with ad-blocking) on Kubernetes</title><link>https://blog.jamesclonk.io/posts/wireguard-on-kubernetes/</link><pubDate>Fri, 15 Oct 2021 17:19:41 +0200</pubDate><guid>https://blog.jamesclonk.io/posts/wireguard-on-kubernetes/</guid><description>WireGuard So, after being back from a recent vacation trip and having to use the hotel Wi-Fi for my mobile phone, I once more started thinking about setting up a VPN endpoint for myself. I simply don&amp;rsquo;t trust &amp;ldquo;foreign&amp;rdquo; Wi-Fi hotspots.
A few years ago I kept a simple OpenVPN installation up and running on a DigitalOcean droplet, but let it deteriorate and stopped using it at some point. Also because of the Coronavirus pandemic that started last year there wasn&amp;rsquo;t much travelling around anyway, thus I had no immediate need for a VPN.</description></item><item><title>A blog with Hugo on GitHub</title><link>https://blog.jamesclonk.io/posts/deploy-hugo-with-github-actions/</link><pubDate>Wed, 28 Jul 2021 20:57:18 +0200</pubDate><guid>https://blog.jamesclonk.io/posts/deploy-hugo-with-github-actions/</guid><description>I want to do some blogging So I wanted to migrate all of my existing blog posts (and create some new ones of course) to a new self-hosted system. My requirements for this have been the following:
Simple and easy to use (I hate complicated UI editors!) Preferably Markdown or similar format support Open source Self-hosted Easily runnable on my personal K8s cluster Tucked away behind an Ingress-Nginx controller, it must not try to do its own TLS / HTTPS handling Preferably no need for a database If it needs to have a database, then it must be Postgres (as that is what I already manage on my K8s infrastructure) Secure Preferably written in Golang PHP based software is out of the question by default!</description></item><item><title>Using Mozilla/SOPS for secret management</title><link>https://blog.jamesclonk.io/posts/encrypt-secrets-with-sops/</link><pubDate>Sun, 25 Jul 2021 19:51:09 +0200</pubDate><guid>https://blog.jamesclonk.io/posts/encrypt-secrets-with-sops/</guid><description>Enviroment variables When I was originally contemplating on how to run all my personal projects and applications on my own Kubernetes cluster, one of the problems was how would I store secrets? Where would I store them?
Since I intended to have all my Infrastructure-as-Code, deployment and application repositories publicly accessible on GitHub (to be able to benefit from all the nice free services it provides for public / open-source projects), I needed to figure out how I should do this.</description></item><item><title>IP-whitelisting with a Cloud Foundry Route-Service</title><link>https://blog.jamesclonk.io/posts/ip-whitelisting-with-a-route-service/</link><pubDate>Sun, 28 Jun 2020 10:13:15 +0200</pubDate><guid>https://blog.jamesclonk.io/posts/ip-whitelisting-with-a-route-service/</guid><description>As an app developer using the Swisscom Application Cloud (which is based on the open source platform-as-a-service &amp;ldquo;Cloud Foundry&amp;quot;) you might have run into the situation already where you&amp;rsquo;d want to stop your applications from being accessible to everybody. More specifically you want to restrict access to them only for certain IPs.
Luckily for you Cloud Foundry has a feature that can do exactly that (and much more!): Route-Services
Route-Services? Route-services allow you to apply transformation or preprocessing of HTTP requests before they reach a target application.</description></item><item><title>Automatic database backups with Backman</title><link>https://blog.jamesclonk.io/posts/database-backups-with-backman/</link><pubDate>Tue, 17 Mar 2020 11:17:37 +0200</pubDate><guid>https://blog.jamesclonk.io/posts/database-backups-with-backman/</guid><description>I&amp;rsquo;ve always been a big fan of using Postgres as my main database backend for all my applications, but I&amp;rsquo;ve also always been paranoid about losing data and the need for backups. So when I started pushing my applications onto the Swisscom Application Cloud and attaching Postgres databases to them (hosted by ElephantSQL), I needed a way to ensure there will always be backups, that they are under my control and supervision and hosted externally / off-site from the Postgres-provider itself, preferably on an S3 object store.</description></item><item><title>Using a Service Broker in Cloud Foundry</title><link>https://blog.jamesclonk.io/posts/using-a-service-broker-in-cloud-foundry/</link><pubDate>Tue, 31 Dec 2019 11:23:54 +0200</pubDate><guid>https://blog.jamesclonk.io/posts/using-a-service-broker-in-cloud-foundry/</guid><description>OSBAPI? The Open Service Broker API (OSBAPI) is a specification that defines a common language for service providers that your cloud native applications can use to manage cloud services without lockin.
OSBAPI allows independent software vendors, service providers and developers to easily integrate and consume services for workloads running on cloud native platforms such as the Swisscom Application Cloud, which is based on Cloud Foundry and Kubernetes. The specification describes a simple set of API endpoints which can be used to provision, access and manage various service offerings, and has been adopted by many different platforms and thousands of service providers by now.</description></item><item><title>Cloud Foundry and Prometheus</title><link>https://blog.jamesclonk.io/posts/cloud-foundry-and-prometheus/</link><pubDate>Tue, 26 Nov 2019 11:40:41 +0200</pubDate><guid>https://blog.jamesclonk.io/posts/cloud-foundry-and-prometheus/</guid><description>Where are my metrics? A Cloud Foundry story Loggregator The Loggregator in Cloud Foundry is the system behind the scenes that&amp;rsquo;s responsible for gathering and streaming logs and metrics about user apps. It also gathers and streams metrics from Cloud Foundry components itself and health metrics from other platform VMs. Loggregator allows you to view these logs and metrics either through the Loggregator CF-CLI plugins or through various third-party services and consumers, like for example the Cloud-Controller (API), a Firehose Nozzle or a Log-Cache endpoint.</description></item><item><title>My Tonkatsu Recipe</title><link>https://blog.jamesclonk.io/posts/my-tonkatsu-recipe/</link><pubDate>Sat, 23 Nov 2019 20:30:35 +0200</pubDate><guid>https://blog.jamesclonk.io/posts/my-tonkatsu-recipe/</guid><description>This is neither a technical blog post, nor is it written in English, I know. But please bear with me. (It&amp;rsquo;s just 10x easier to write a recipe in German than English ðŸ™ˆ)
So I just came back recently from a 3 week trip to Japan, and while being there I ate the most amazing Tonkatsu I&amp;rsquo;ve ever had! If you are ever in Tokyo, you have to go and visit the Tonkatsu - Masamune restaurant (Google Maps).</description></item><item><title>Scheduling Tasks in Cloud Foundry</title><link>https://blog.jamesclonk.io/posts/scheduling-tasks-in-cloud-foundry/</link><pubDate>Tue, 03 Sep 2019 14:23:30 +0200</pubDate><guid>https://blog.jamesclonk.io/posts/scheduling-tasks-in-cloud-foundry/</guid><description>The Task-Scheduler service on the Swisscom Application Cloud allows you to schedule and automatically run tasks for your applications. You can use it to schedule periodical execution of any tasks on the Application Cloud, including database migrations, emails, batch jobs, etc.
What are Tasks? While most of the time you are probably using the Swisscom Application Cloud (A managed Cloud Foundry platform-as-a-service) to push long running processes or &amp;ldquo;apps&amp;rdquo; as they are commonly called, there is the occasional use case for tasks.</description></item><item><title>Building a motion rig for Sim-racing</title><link>https://blog.jamesclonk.io/posts/building-a-simracing-rig/</link><pubDate>Thu, 27 Dec 2018 15:56:39 +0200</pubDate><guid>https://blog.jamesclonk.io/posts/building-a-simracing-rig/</guid><description>What is Sim-racing? Sim-racing is short for &amp;ldquo;simulated racing&amp;rdquo;. Basically it means you are using racing simulator software to try and simulate real world racing as accurately as possible. This includes all the real-world variables such as fuel usage, damage to the car, tire wear, grip, suspension settings, etc., which is unlike the more well-known arcade racing games like Forza Motorsport or Gran Turismo. The goal is to provide the most realistic depiction of real world racing as much as possible.</description></item><item><title>Container Networking with Cloud Foundry</title><link>https://blog.jamesclonk.io/posts/container-networking-with-cloud-foundry/</link><pubDate>Sat, 19 May 2018 16:06:35 +0200</pubDate><guid>https://blog.jamesclonk.io/posts/container-networking-with-cloud-foundry/</guid><description>Container-to-Container Networking on the Swisscom Application Cloud allows for secure and fast direct TCP and UDP communication between your applications. And thanks to its built in Application Service Discovery your app containers will easily be able to locate each other.
The Swisscom Application Cloud uses the open-source distribution of Cloud Foundry to provide you with a managed platform-as-a-service. Ever since the platforms official release we&amp;rsquo;ve continually been adding and implementing new features, and one of these is the Container-to-Container Networking.</description></item><item><title>TCP-Routing on Cloud Foundry</title><link>https://blog.jamesclonk.io/posts/tcp-routing-on-cloud-foundry/</link><pubDate>Sun, 15 Apr 2018 10:33:42 +0200</pubDate><guid>https://blog.jamesclonk.io/posts/tcp-routing-on-cloud-foundry/</guid><description>The Swisscom Application Cloud, which is based on the open source industry standard Cloud Foundry, offers an exciting new feature for its users. TCP routing, the ability to support and expose any TCP-based, non-HTTP application to the world. Let&amp;rsquo;s have a closer look and learn how to use TCP routing.
The Swisscom Application Cloud is based on Cloud Foundry, the leading open source industry standard for building your own platform-as-a-service.</description></item><item><title>Lose less time with Jira</title><link>https://blog.jamesclonk.io/posts/lose-less-time-with-jira/</link><pubDate>Sat, 21 Jan 2017 20:55:45 +0200</pubDate><guid>https://blog.jamesclonk.io/posts/lose-less-time-with-jira/</guid><description>Jira Probably everybody knows or has heard of Jira before.
Jira is commonly used as a tool for issue, epics, stories and bug tracking and agile project management in general, developed by Atlassian, and can be installed and run on-premises or consumed as a Cloud Software-as-a-Service product. At the company I work at (Swisscom) we also use Jira internally for all those use cases.
But dealing with the web UI can be very cumbersome and slow, everytime I have to update my tasks or stories and modify their current state I keep rolling my eyes at the general slowness of the whole procedure.</description></item><item><title>Docker and Cloud Foundry</title><link>https://blog.jamesclonk.io/posts/docker-and-cloud-foundry/</link><pubDate>Wed, 04 May 2016 14:35:57 +0200</pubDate><guid>https://blog.jamesclonk.io/posts/docker-and-cloud-foundry/</guid><description>Cloud Foundry is the open source industry standard for a Platform-as-a-Service. With the next version of the Cloud Foundry scheduler, the user is now able to run his Docker images with a full PaaS experience on the Swisscom Application Cloud. Find out how to deploy your Docker images now!
&amp;ldquo;Docker! Docker! Docker!&amp;quot; â€“ What is it? From https://www.docker.com/what-docker:
Docker allows you to package an application with all of its dependencies into a standardized unit for software development.</description></item><item><title>Continuous Integration with Concourse</title><link>https://blog.jamesclonk.io/posts/continuous-integration-with-concourse/</link><pubDate>Mon, 11 Jan 2016 19:22:35 +0200</pubDate><guid>https://blog.jamesclonk.io/posts/continuous-integration-with-concourse/</guid><description>Concourse - the continuous thing-doer edit @ 2020.12.01 These days there are many different platforms and systems out there that can be used to automate all your CI/CD needs.
Software-as-a-Service / hosted solutions:
TravisCI CircleCI Drone.io GitHub Actions Open Source / self-hosted:
Jenkins GoCD Concourse ArgoCD Tekton One the SaaS side after I was initially using TravisCI, then gradually transitioning to CircleCI. But eventually I ended up using GitHub Actions, they seem to provide a reasonable amount of flexibility and customization at a low price (free!</description></item><item><title>Service Discovery with Consul</title><link>https://blog.jamesclonk.io/posts/service-discovery-with-consul/</link><pubDate>Thu, 11 Jun 2015 14:40:58 +0200</pubDate><guid>https://blog.jamesclonk.io/posts/service-discovery-with-consul/</guid><description>What is Service Discovery? In a cloud environment applications can change often, containers can move around, and VMs can be shutdown and recreated at any time. How do you keep track of where your databases or other services or applications are located and what their IP addresses are? Modern microservices architecture requires the introduction of &amp;ldquo;Service Discovery&amp;rdquo;.
Service discovery is the means to provide a way for automatic detection of applications and services in the cloud, to keep track of the location of service instances with dynamically assigned IP address.</description></item><item><title>Aiming for High Availability</title><link>https://blog.jamesclonk.io/posts/aiming-for-high-availability/</link><pubDate>Tue, 03 Feb 2015 10:42:34 +0200</pubDate><guid>https://blog.jamesclonk.io/posts/aiming-for-high-availability/</guid><description>From Old to New A bit over a year ago I have rewritten my entire personal website from PHP into Golang. Before that I was using a typical LAMP stack hoster to host my website, where all you usually do is upload your PHP files via FTP and everything is hosted there for you, the most simple entry in the world of &amp;ldquo;web development&amp;rdquo;.
This old PHP based code has been archived on GitHub and can still be found here in case you&amp;rsquo;re interested:</description></item></channel></rss>