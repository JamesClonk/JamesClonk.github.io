<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ramblings about all things technical</title><link>https://blog.jamesclonk.io/</link><description>Recent content on Ramblings about all things technical</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 28 Jul 2021 20:57:18 +0200</lastBuildDate><atom:link href="https://blog.jamesclonk.io/index.xml" rel="self" type="application/rss+xml"/><item><title>A blog with Hugo on GitHub</title><link>https://blog.jamesclonk.io/posts/deploy-hugo-with-github-actions/</link><pubDate>Wed, 28 Jul 2021 20:57:18 +0200</pubDate><guid>https://blog.jamesclonk.io/posts/deploy-hugo-with-github-actions/</guid><description>I want to do some blogging So I wanted to migrate all of my existing blog posts (and create some new ones of course) to a new self-hosted system. My requirements for this have been the following:
Simple and easy to use (I hate complicated UI editors!) Preferably Markdown or similar format support Open source Self-hosted Easily runnable on my personal K8s cluster Tucked away behind an Ingress-Nginx controller, it must not try to do its own TLS / HTTPS handling Preferably no need for a database If it needs to have a database, then it must be Postgres (as that is what I already manage on my K8s infrastructure) Secure Preferably written in Golang PHP based software is out of the question by default!</description></item><item><title>IP-whitelisting with a Cloud Foundry Route-Service</title><link>https://blog.jamesclonk.io/posts/ip-whitelisting-with-a-route-service/</link><pubDate>Sun, 28 Jun 2020 10:13:15 +0200</pubDate><guid>https://blog.jamesclonk.io/posts/ip-whitelisting-with-a-route-service/</guid><description>As an app developer using the Swisscom Application Cloud (which is based on the open source platform-as-a-service &amp;ldquo;Cloud Foundry&amp;quot;) you might have run into the situation already where you&amp;rsquo;d want to stop your applications from being accessible to everybody. More specifically you want to restrict access to them only for certain IPs.
Luckily for you Cloud Foundry has a feature that can do exactly that for (and much more!): Route-Services</description></item><item><title>Using a Service Broker in Cloud Foundry</title><link>https://blog.jamesclonk.io/posts/using-a-service-broker-in-cloud-foundry/</link><pubDate>Tue, 31 Dec 2019 11:23:54 +0200</pubDate><guid>https://blog.jamesclonk.io/posts/using-a-service-broker-in-cloud-foundry/</guid><description>OSBAPI? The Open Service Broker API (OSBAPI) is a specification that defines a common language for service providers that your cloud native applications can use to manage cloud services without lockin.
OSBAPI allows independent software vendors, service providers and developers to easily integrate and consume services for workloads running on cloud native platforms such as the Swisscom Application Cloud, which is based on Cloud Foundry and Kubernetes. The specification describes a simple set of API endpoints which can be used to provision, access and manage various service offerings, and has been adopted by many different platforms and thousands of service providers by now.</description></item><item><title>Cloud Foundry and Prometheus</title><link>https://blog.jamesclonk.io/posts/cloud-foundry-and-prometheus/</link><pubDate>Tue, 26 Nov 2019 11:40:41 +0200</pubDate><guid>https://blog.jamesclonk.io/posts/cloud-foundry-and-prometheus/</guid><description>Where are my metrics? A Cloud Foundry story Loggregator The Loggregator in Cloud Foundry is the system behind the scenes that&amp;rsquo;s responsible for gathering and streaming logs and metrics about user apps. It also gathers and streams metrics from Cloud Foundry components itself and health metrics from other platform VMs. Loggregator allows you to view these logs and metrics either through the Loggregator CF-CLI plugins or through various third-party services and consumers, like for example the Cloud-Controller (API), a Firehose Nozzle or a Log-Cache endpoint.</description></item><item><title>My Tonkatsu Recipe</title><link>https://blog.jamesclonk.io/posts/my-tonkatsu-recipe/</link><pubDate>Sat, 23 Nov 2019 20:30:35 +0200</pubDate><guid>https://blog.jamesclonk.io/posts/my-tonkatsu-recipe/</guid><description>This is neither a technical blog post, nor is it written in English, I know. But please bear with me. (It&amp;rsquo;s just 10x easier to write a recipe in German than English ðŸ™ˆ)
So I just came back recently from a 3 week trip to Japan, and while being there I ate the most amazing Tonkatsu I&amp;rsquo;ve ever had! If you are ever in Tokyo, you have to go and visit the Tonkatsu - Masamune restaurant (Google Maps).</description></item><item><title>Scheduling Tasks in Cloud Foundry</title><link>https://blog.jamesclonk.io/posts/scheduling-tasks-in-cloud-foundry/</link><pubDate>Tue, 03 Sep 2019 14:23:30 +0200</pubDate><guid>https://blog.jamesclonk.io/posts/scheduling-tasks-in-cloud-foundry/</guid><description>The Task-Scheduler service on the Swisscom Application Cloud allows you to schedule and automatically run tasks for your applications. You can use it to schedule periodical execution of any tasks on the Application Cloud, including database migrations, emails, batch jobs, etc.
What are Tasks? While most of the time you are probably using the Swisscom Application Cloud (A managed Cloud Foundry platform-as-a-service) to push long running processes or &amp;ldquo;apps&amp;rdquo; as they are commonly called, there is the occasional use case for tasks.</description></item><item><title>Container Networking with Cloud Foundry</title><link>https://blog.jamesclonk.io/posts/container-networking-with-cloud-foundry/</link><pubDate>Sat, 19 May 2018 16:06:35 +0200</pubDate><guid>https://blog.jamesclonk.io/posts/container-networking-with-cloud-foundry/</guid><description>Container-to-Container Networking on the Swisscom Application Cloud allows for secure and fast direct TCP and UDP communication between your applications. And thanks to its built in Application Service Discovery your app containers will easily be able to locate each other.
The Swisscom Application Cloud uses the open-source distribution of Cloud Foundry to provide you with a managed platform-as-a-service. Ever since the platforms official release we&amp;rsquo;ve continually been adding and implementing new features, and one of these is the Container-to-Container Networking.</description></item><item><title>TCP-Routing on Cloud Foundry</title><link>https://blog.jamesclonk.io/posts/tcp-routing-on-cloud-foundry/</link><pubDate>Sun, 15 Apr 2018 10:33:42 +0200</pubDate><guid>https://blog.jamesclonk.io/posts/tcp-routing-on-cloud-foundry/</guid><description>The Swisscom Application Cloud, which is based on the open source industry standard Cloud Foundry, offers an exciting new feature for its users. TCP routing, the ability to support and expose any TCP-based, non-HTTP application to the world. Let&amp;rsquo;s have a closer look and learn how to use TCP routing.
The Swisscom Application Cloud is based on Cloud Foundry, the leading open source industry standard for building your own platform-as-a-service.</description></item><item><title>Docker and Cloud Foundry</title><link>https://blog.jamesclonk.io/posts/docker-and-cloud-foundry/</link><pubDate>Wed, 04 May 2016 14:35:57 +0200</pubDate><guid>https://blog.jamesclonk.io/posts/docker-and-cloud-foundry/</guid><description>Cloud Foundry is the open source industry standard for a Platform-as-a-Service. With the next version of the Cloud Foundry scheduler, the user is now able to run his Docker images with a full PaaS experience on the Swisscom Application Cloud. Find out how to deploy your Docker images now!
&amp;ldquo;Docker! Docker! Docker!&amp;quot; â€“ What is it? From https://www.docker.com/what-docker:
Docker allows you to package an application with all of its dependencies into a standardized unit for software development.</description></item><item><title>About</title><link>https://blog.jamesclonk.io/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.jamesclonk.io/about/</guid><description>Fabio Berchtold jamesclonk := struct { Name string Nationality string Age string Languages []string Technologies []string Databases []string Hobbies []string }{ Name: &amp;#34;Fabio Berchtold&amp;#34;, Nationality: &amp;#34;Swiss ðŸ‡¨ðŸ‡­&amp;#34;, Age: &amp;#34;30+ ðŸ˜‚ðŸ™ˆ&amp;#34;, Languages: []string{ &amp;#34;English&amp;#34;, &amp;#34;German&amp;#34;, &amp;#34;Swiss German&amp;#34;, &amp;#34;Golang&amp;#34;, &amp;#34;Ruby&amp;#34;, &amp;#34;Python&amp;#34;, &amp;#34;Java&amp;#34;, &amp;#34;Scala&amp;#34;, &amp;#34;Perl&amp;#34;, }, Technologies: []string{ &amp;#34;Cloud Foundry&amp;#34;, &amp;#34;BOSH&amp;#34;, &amp;#34;Kubernetes&amp;#34;, &amp;#34;Containers&amp;#34;, &amp;#34;Linux&amp;#34;, }, Databases: []string{ &amp;#34;Postgres&amp;#34;, &amp;#34;MySQL&amp;#34;, &amp;#34;Oracle&amp;#34;, &amp;#34;SQLite&amp;#34;, &amp;#34;MongoDB&amp;#34;, &amp;#34;InfluxDB&amp;#34;, }, Hobbies: []string{ &amp;#34;Formula 1&amp;#34;, &amp;#34;iRacing&amp;#34;, &amp;#34;Kerbal Space Program&amp;#34;, &amp;#34;Zwift&amp;#34;, &amp;#34;Tennis&amp;#34;, &amp;#34;Skiing&amp;#34;, &amp;#34;Urban Gardening&amp;#34;, &amp;#34;Electronics&amp;#34;, }, }</description></item></channel></rss>