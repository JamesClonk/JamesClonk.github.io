<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ramblings about all things technical</title><link>https://blog.jamesclonk.io/</link><description>Recent content on Ramblings about all things technical</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 28 Jul 2021 20:57:18 +0200</lastBuildDate><atom:link href="https://blog.jamesclonk.io/index.xml" rel="self" type="application/rss+xml"/><item><title>A blog with Hugo on GitHub</title><link>https://blog.jamesclonk.io/posts/deploy-hugo-with-github-actions/</link><pubDate>Wed, 28 Jul 2021 20:57:18 +0200</pubDate><guid>https://blog.jamesclonk.io/posts/deploy-hugo-with-github-actions/</guid><description>I want to do some blogging So I wanted to migrate all of my existing blog posts (and create some new ones of course) to a new self-hosted system. My requirements for this have been the following:
Simple and easy to use (I hate complicated UI editors!) Preferably Markdown or similar format support Open source Self-hosted Easily runnable on my personal K8s cluster Tucked away behind an Ingress-Nginx controller, it must not try to do its own TLS / HTTPS handling Preferably no need for a database If it needs to have a database, then it must be Postgres (as that is what I already manage on my K8s infrastructure) Secure Preferably written in Golang PHP based software is out of the question by default!</description></item><item><title>Using a Service Broker in Cloud Foundry</title><link>https://blog.jamesclonk.io/posts/using-a-service-broker-in-cloud-foundry/</link><pubDate>Tue, 31 Dec 2019 11:23:54 +0200</pubDate><guid>https://blog.jamesclonk.io/posts/using-a-service-broker-in-cloud-foundry/</guid><description>OSBAPI? The Open Service Broker API (OSBAPI) is a specification that defines a common language for service providers that your cloud native applications can use to manage cloud services without lockin.
OSBAPI allows independent software vendors, service providers and developers to easily integrate and consume services for workloads running on cloud native platforms such as the Swisscom Application Cloud, which is based on Cloud Foundry and Kubernetes. The specification describes a simple set of API endpoints which can be used to provision, access and manage various service offerings, and has been adopted by many different platforms and thousands of service providers by now.</description></item><item><title>My Tonkatsu Recipe</title><link>https://blog.jamesclonk.io/posts/my-tonkatsu-recipe/</link><pubDate>Sat, 23 Nov 2019 20:30:35 +0200</pubDate><guid>https://blog.jamesclonk.io/posts/my-tonkatsu-recipe/</guid><description>This is neither a technical blog post, nor is it written in English, I know. But please bear with me. (It&amp;rsquo;s just 10x easier to write a recipe in German than English üôà)
The definitive guide to Tonkatsu Ingredients ca. 1.5 - 1.8cm dicke Schweinshalssteaks Sushi Reis / Japanischer Reis Tonkatsu Sauce (Bull-Dog!) Weisskohl Sojasauce (hell wenn m√∂glich) Gem√ºse√∂l Reisessig Sesam√∂l Miso Kartoffelst√§rke oder Maizena Urdinkelmehl Eier Panko / Japanisches Paniermehl High-Oleic Sonnenblumen√∂l / Frittier√∂l Pfeffer / Pfefferk√∂rner Gemahlener Koriander (Pulver) 1 Zweig Rosmarin Salz Zucker Guide Salzsole herstellen:</description></item><item><title>About</title><link>https://blog.jamesclonk.io/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.jamesclonk.io/about/</guid><description>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent lacinia lorem quis sodales auctor. Donec bibendum odio leo, bibendum iaculis lectus dapibus sit amet. Etiam ut euismod lectus, vel finibus metus. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Integer quis vestibulum justo. Duis scelerisque ullamcorper sem, eget congue lorem ultrices mattis. Nam ut mollis tellus, id facilisis turpis. Duis ac egestas mi, a mattis dolor. Curabitur vestibulum est nec tortor hendrerit, vehicula malesuada quam tempor.</description></item></channel></rss>