<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>kubernetes on Ramblings about all things technical</title><link>https://blog.jamesclonk.io/tags/kubernetes/</link><description>Recent content in kubernetes on Ramblings about all things technical</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 24 Oct 2022 17:55:21 +0000</lastBuildDate><atom:link href="https://blog.jamesclonk.io/tags/kubernetes/index.xml" rel="self" type="application/rss+xml"/><item><title>Deploy a K3s cluster with Terraform</title><link>https://blog.jamesclonk.io/posts/kubernetes-with-terraform/</link><pubDate>Mon, 24 Oct 2022 17:55:21 +0000</pubDate><guid>https://blog.jamesclonk.io/posts/kubernetes-with-terraform/</guid><description>Since Infrastructure-as-Code is all the rage out there (and for good reason, you&amp;rsquo;re a fool if your entire tech stack is not 100% rebuildable and reproducible in an idempotent way!), I&amp;rsquo;ve always wondered if I should write and open-source a project that&amp;rsquo;s written entirely as a Terraform module only and that would spin up a Kubernetes cluster on Swisscom&amp;rsquo;s public Infrastructure-as-a-Service offering, DCS+ (Dynamic Computing Services), which is based on VMware vCloud Director.</description></item><item><title>Setting up NSX-T Distributed Firewall with Terraform</title><link>https://blog.jamesclonk.io/posts/setting-up-nsx-t-with-terraform/</link><pubDate>Sun, 31 Jul 2022 12:33:24 +0000</pubDate><guid>https://blog.jamesclonk.io/posts/setting-up-nsx-t-with-terraform/</guid><description>NSX-T NSX-T is a software-defined networking (SDN) platform by VMware to build and connect environments together. It can be used for any cloud-native workload, bare metal or hypervisor, public, private or multi-cloud environments. It allows you to abstract your phyiscal network and to create and define networks for your workloads entirely in software.
One of the features in NSX-T is the so-called &amp;ldquo;Distributed Firewall&amp;rdquo; (DFW), with which you can configure firewall rules for all your east-west traffic inside an NSX-T network.</description></item><item><title>Using Kubernetes Service Bindings in Backman</title><link>https://blog.jamesclonk.io/posts/backman-and-kubernetes-service-bindings/</link><pubDate>Sun, 10 Jul 2022 19:22:51 +0000</pubDate><guid>https://blog.jamesclonk.io/posts/backman-and-kubernetes-service-bindings/</guid><description>What is Backman again? I mentioned Backman already once in a previous post, but in short it&amp;rsquo;s an application for managing database backups. Backman can be deployed on Cloud Foundry or Kubernetes and automatically detects and configures your databases through bindings, creates backups and stores these on an S3-compatible object storage. Backups can later be restored on-demand or downloaded.
Run Backman on Kubernetes Deploying and running Backman on Kubernetes has gotten fairly straightforward these days.</description></item><item><title>Web applications with automatic TLS certificates and GitHub OAuth2</title><link>https://blog.jamesclonk.io/posts/kubernetes-ingress-with-oauth2-proxy/</link><pubDate>Tue, 11 Jan 2022 19:22:49 +0000</pubDate><guid>https://blog.jamesclonk.io/posts/kubernetes-ingress-with-oauth2-proxy/</guid><description>&amp;ldquo;Web applications with TLS and OAuth2 on Kubernetes? Surely you&amp;rsquo;re joking, Mr. JamesClonk!&amp;rdquo;
I&amp;rsquo;ve been ranting a lot recently about how inferior Kubernetes is compared to Cloud Foundry. There isn&amp;rsquo;t any redeeming factor, not a single thing it does even remotely as well as CF when it comes to the developer experience in terms of running web applications. Its inherent complexity requires an insane amount of DevOps / operations overhead by comparison.</description></item><item><title>Running WireGuard VPN (with ad-blocking) on Kubernetes</title><link>https://blog.jamesclonk.io/posts/wireguard-on-kubernetes/</link><pubDate>Fri, 15 Oct 2021 17:19:41 +0000</pubDate><guid>https://blog.jamesclonk.io/posts/wireguard-on-kubernetes/</guid><description>WireGuard So, after being back from a recent vacation trip and having to use the hotel Wi-Fi on my mobile phone, I once more started thinking about setting up a VPN endpoint for myself. I simply don&amp;rsquo;t trust &amp;ldquo;foreign&amp;rdquo; Wi-Fi hotspots.
A few years ago I kept a simple OpenVPN installation up and running on a DigitalOcean droplet, but let it deteriorate and stopped using it at some point. Also because of the Coronavirus pandemic that started last year there wasn&amp;rsquo;t much travelling around anyway, thus I had no immediate need for a VPN.</description></item><item><title>Using Knative Serving on Kubernetes</title><link>https://blog.jamesclonk.io/posts/using-knative-serving/</link><pubDate>Sat, 13 Mar 2021 13:54:27 +0000</pubDate><guid>https://blog.jamesclonk.io/posts/using-knative-serving/</guid><description>Serverless Computing? We probably all heard of AWS Lambda, Function-as-a-Service (FaaS) or Serverless Computing in general before. And while I find the term &amp;ldquo;serverless&amp;rdquo; rather silly, its actual meaning of executing compute processes or containers only on-demand in the cloud and allow for a simplified, no capacity planning required, pay-only-what-you-use model of running your applications or code is not to be easily dismissed and can be quite valuable.
Since allowing yourself to be captured and locked into any particular vendor, escpecially like going for AWS Lambda, is a big mistake however, what options are there if we want to avoid such folly?</description></item><item><title>My own personal Kubernetes</title><link>https://blog.jamesclonk.io/posts/my-own-kubernetes/</link><pubDate>Mon, 30 Nov 2020 12:49:34 +0000</pubDate><guid>https://blog.jamesclonk.io/posts/my-own-kubernetes/</guid><description>Managed Kubernetes? On my journey where I was (unfortunately) forced to migrate from Cloud Foundry to Kubernetes, I first went with a &amp;ldquo;Managed Kubernetes-as-a-Service&amp;rdquo; offering. You can read about that here.
But it didn&amp;rsquo;t take long for problems and issues to start emerging. The cluster not being on exactly the version I wanted it to be, pre-installed components that didn&amp;rsquo;t behave they way I wanted (nginx ingress controller for example), price hikes and occasional outages, not really a lot of insight into the behind the scenes of my cluster, etc.</description></item><item><title>Migrating from Cloud Foundry to Kubernetes</title><link>https://blog.jamesclonk.io/posts/migrating-from-cloud-foundry-to-kubernetes/</link><pubDate>Mon, 29 Jun 2020 17:28:34 +0000</pubDate><guid>https://blog.jamesclonk.io/posts/migrating-from-cloud-foundry-to-kubernetes/</guid><description>For quite a few years now I&amp;rsquo;ve been hosting and running all my personal projects on Cloud Foundry. It&amp;rsquo;s an open-source, highly-available, highly scalable, super comfortable to use platform-as-a-service for web applications and developers. Deploying your Ruby, Python or Golang apps is as simple as just typing cf push. Your source code will be uploaded, compiled into a runnable image, and scheduled and be running as container on the platform. Really, in terms of developer experience there is nothing else remotely like it (Except maybe Heroku, from which it drew a lot of inspiration in its early days).</description></item><item><title>Automatic database backups with Backman</title><link>https://blog.jamesclonk.io/posts/database-backups-with-backman/</link><pubDate>Tue, 17 Mar 2020 11:17:37 +0000</pubDate><guid>https://blog.jamesclonk.io/posts/database-backups-with-backman/</guid><description>I&amp;rsquo;ve always been a big fan of using Postgres as my main database backend for all my applications, but I&amp;rsquo;ve also always been paranoid about losing data and the need for backups. So when I started pushing my applications onto the Swisscom Application Cloud and attaching Postgres databases to them (hosted by ElephantSQL), I needed a way to ensure there will always be backups, that they are under my control and supervision and hosted externally / off-site from the Postgres-provider itself, preferably on an S3 object store.</description></item><item><title>Using a Service Broker in Cloud Foundry and Kubernetes</title><link>https://blog.jamesclonk.io/posts/using-a-service-broker-in-cloud-foundry/</link><pubDate>Tue, 31 Dec 2019 11:23:54 +0000</pubDate><guid>https://blog.jamesclonk.io/posts/using-a-service-broker-in-cloud-foundry/</guid><description>OSBAPI? The Open Service Broker API (OSBAPI) is a specification that defines a common language for service providers that your cloud native applications can use to manage cloud services without lockin.
OSBAPI allows independent software vendors, service providers and developers to easily integrate and consume services for workloads running on cloud native platforms such as the Swisscom Application Cloud, which is based on Cloud Foundry and Kubernetes. The specification describes a simple set of API endpoints which can be used to provision, access and manage various service offerings, and has been adopted by many different platforms and thousands of service providers by now.</description></item></channel></rss>